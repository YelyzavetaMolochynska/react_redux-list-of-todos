{"version":3,"sources":["types/Status.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["StatusType","actions","todo","type","payload","currentTodoReducer","state","action","query","status","initialState","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","useState","todosList","setTodosList","dispatch","filteredTodos","title","toLowerCase","includes","toLocaleLowerCase","COMPLETED","completed","ACTIVE","useEffect","length","className","map","id","onClick","currentTodoActions","handleSelect","classNames","TodoFilter","handleChangeQuery","value","FilterActions","handleChangeStatus","onSubmit","event","preventDefault","onChange","e","target","ALL","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","userIsLoading","setUserIsLoading","user","setUser","fetchUser","a","userId","userFromServer","href","email","name","App","isLoading","setIsLoading","fetchTodos","todosFromServer","todosActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.78a924cf.chunk.js","sourcesContent":["export type Status = 'all' | 'active' | 'completed';\n\nexport enum StatusType {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetQueryAction = { type: 'filter/SET_QUERY', payload: string };\ntype SetStatusAction = { type: 'filter/SET_STATUS', payload: Status };\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'filter/SET_QUERY',\n  payload: query,\n});\n\nconst setStatus = (status: Status): SetStatusAction => ({\n  type: 'filter/SET_STATUS',\n  payload: status,\n});\n\nexport const actions = { setQuery, setStatus };\n\ntype Actions = SetQueryAction | SetStatusAction;\ntype State = {\n  query: string;\n  status: Status;\n};\n\nconst initialState: State = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (state: State = initialState, action: Actions) => {\n  switch (action.type) {\n    case 'filter/SET_QUERY':\n      return { ...state, query: action.payload };\n\n    case 'filter/SET_STATUS':\n      return { ...state, status: action.payload };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodos = { type: 'todos/SET', payload: Todo[] };\n\nconst set = (todos: Todo[]): SetTodos => (\n  { type: 'todos/SET', payload: todos });\n\nexport const actions = { set };\n\nconst todosReducer = (todos: Todo[] = [], action: SetTodos): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Todo } from '../../types/Todo';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { StatusType } from '../../types/Status';\n\nexport const TodoList: React.FC = () => {\n  const [todosList, setTodosList] = useState<Todo[]>([]);\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n  const { query, status } = useAppSelector(state => state.filter);\n\n  const filteredTodos = todos\n    .filter(todo => todo.title.toLowerCase().includes(query.toLocaleLowerCase()))\n    .filter(todo => {\n      switch (status) {\n        case StatusType.COMPLETED:\n          return todo.completed;\n\n        case StatusType.ACTIVE:\n          return !todo.completed;\n        default:\n          return true;\n      }\n    });\n\n  const handleSelect = (todo: Todo) => dispatch(\n    currentTodoActions.setTodo(todo),\n  );\n\n  useEffect(() => {\n    setTodosList(filteredTodos);\n  }, [todos, status, query]);\n\n  return (\n    <>\n      {!todosList.length ? (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      ) : (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {todosList.map(todo => (\n              <tr\n                data-cy=\"todo\"\n                key={todo.id}\n                className={todo === currentTodo ? 'has-background-info-light' : ''}\n              >\n                <td className=\"is-vcentered\">{todo.id}</td>\n                <td className=\"is-vcentered\">\n                  {todo.completed && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )}\n                </td>\n\n                <td className=\"is-vcentered is-expanded\">\n                  <p\n                    className={todo.completed ? 'has-text-success' : 'has-text-danger'}\n                  >\n                    {todo.title}\n                  </p>\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => handleSelect(todo)}\n                  >\n                    <span className=\"icon\">\n                      <i className={classNames('far', {\n                        'fa-eye-slash': todo === currentTodo,\n                        'fa-eye': todo !== currentTodo,\n                      })}\n                      />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as FilterActions } from '../../features/filter';\nimport { Status, StatusType } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { query, status } = useAppSelector(state => state.filter);\n\n  const handleChangeQuery = (value: string) => (\n    dispatch(FilterActions.setQuery(value)));\n\n  const handleChangeStatus = (value: Status) => (\n    dispatch(FilterActions.setStatus(value)));\n\n  const handleClear = (e: React.MouseEvent) => {\n    e.preventDefault();\n\n    handleChangeQuery('');\n    handleChangeStatus('all');\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={(e) => handleChangeStatus(e.target.value as Status)}\n          >\n            <option value={StatusType.ALL}>All</option>\n            <option value={StatusType.ACTIVE}>Active</option>\n            <option value={StatusType.COMPLETED}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(e) => handleChangeQuery(e.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleClear}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n  const [userIsLoading, setUserIsLoading] = useState(false);\n  const [user, setUser] = useState<User | null>(null);\n\n  const handleClickClose = () => dispatch(currentTodoActions.removeTodo());\n\n  const fetchUser = async () => {\n    if (!currentTodo) {\n      return;\n    }\n\n    try {\n      setUserIsLoading(true);\n      const userFromServer = await getUser(currentTodo.userId);\n\n      setUser(userFromServer);\n    } finally {\n      setUserIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchUser();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {userIsLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handleClickClose}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">{currentTodo?.title}</p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {currentTodo?.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n              {' by '}\n              <a href={`mailto:${user?.email}`}>{user?.name}</a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as todosActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const fetchTodos = async () => {\n    try {\n      setIsLoading(true);\n      const todosFromServer = await getTodos();\n\n      dispatch(todosActions.set(todosFromServer));\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchTodos();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? (\n                <Loader />\n              ) : (\n                <TodoList />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}